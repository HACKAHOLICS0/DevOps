pipeline {
    agent any

    environment {
        SONARQUBE_SERVER = 'http://192.168.50.4:9000'
        SONARQUBE_TOKEN = credentials('sonar-token')
        NEXUS_URL = 'http://localhost:8081'
        NEXUS_REPO = 'maven-releases'
        NEXUS_CREDENTIALS_ID = 'nexus-credentials'
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
        DOCKER_IMAGE = 'firaszn/tp-foyer:5.0.0'
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "üì• Clonage du projet depuis GitHub..."
                git branch: 'firas', url: 'https://github.com/HACKAHOLICS0/DevOps.git'
                echo "‚úÖ Code r√©cup√©r√© avec succ√®s !"
            }
        }

        stage('Maven Clean') {
            steps {
                echo "üßπ Nettoyage du projet..."
                sh 'mvn clean'
                echo "‚úÖ Nettoyage termin√© !"
            }
        }

        stage('Maven Compile') {
            steps {
                echo "‚öôÔ∏è Compilation du projet..."
                sh 'mvn compile'
                echo "‚úÖ Compilation r√©ussie !"
            }
        }

        stage('Run Tests') {
            steps {
                echo "üß™ Ex√©cution des tests unitaires..."
                sh 'mvn test'
                echo "‚úÖ Tests termin√©s !"
            }
            post {
                always {
                    junit testResults: '**/target/surefire-reports/*.xml', allowEmptyResults: true
                }
                success {
                    echo "‚úÖ Tous les tests ont r√©ussi !"
                }
                failure {
                    echo "‚ùå Certains tests ont √©chou√© !"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo "üìä Ex√©cution de l'analyse SonarQube..."
                withSonarQubeEnv('SonarQube') {
                    sh '''
                        mvn sonar:sonar \
                        -Dsonar.projectKey=tpFoyeer \
                        -Dsonar.host.url=http://192.168.50.4:9000 \
                        -Dsonar.token=sqp_046aff1a5f29a22e4224f5a7d8c86bc35781365e
                    '''
                }
                echo "‚úÖ Analyse SonarQube termin√©e !"
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    echo 'üì¶ D√©ploiement sur Nexus...'
                    withCredentials([usernamePassword(credentialsId: NEXUS_CREDENTIALS_ID, usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                        sh 'mvn deploy'
                    }
                    echo "‚úÖ D√©ploiement sur Nexus termin√© !"
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    echo "üê≥ Construction de l'image Docker..."
                    sh "docker build -t ${DOCKER_IMAGE} ."
                    
                    echo "üì§ Push de l'image vers Docker Hub..."
                    withDockerRegistry([credentialsId: DOCKER_CREDENTIALS_ID, url: ""]) {
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                    echo "‚úÖ Image Docker publi√©e avec succ√®s !"
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                script {
                    echo "üöÄ D√©ploiement avec Docker Compose..."
                    sh 'docker compose up -d'
                    echo "‚úÖ Services d√©marr√©s avec succ√®s !"
                }
            }
        }
    }

    post {
        success {
            echo "\033[1;32müéâ Pipeline termin√© avec succ√®s ‚úÖ\033[0m"
        }
        failure {
            echo "\033[1;31m‚ùå Pipeline √©chou√© ! V√©rifiez les logs. \033[0m"
        }
    }
}
